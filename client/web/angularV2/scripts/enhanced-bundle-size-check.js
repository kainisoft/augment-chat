#!/usr/bin/env node\n\n/**\n * Enhanced Bundle Size Check Script\n * \n * Supports both application and library bundle analysis\n * with specific thresholds and recommendations.\n */\n\nconsole.log('Script starting...');\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Bundle size thresholds (in KB)\nconst THRESHOLDS = {\n  app: {\n    initial: 1024, // 1MB\n    anyComponentStyle: 8, // 8KB\n    vendor: 2048, // 2MB\n  },\n  library: {\n    total: 500, // 500KB for entire library\n    esm: 300, // 300KB for ESM bundle\n    umd: 400, // 400KB for UMD bundle\n    css: 50, // 50KB for CSS\n  }\n};\n\nfunction checkApplicationBundleSize(projectName = 'angular-v2-workspace') {\n  const statsPath = path.join(__dirname, `../dist/${projectName}/stats.json`);\n  \n  if (!fs.existsSync(statsPath)) {\n    console.error(`‚ùå Stats file not found: ${statsPath}`);\n    console.error('Run \"ng build --stats-json\" first.');\n    process.exit(1);\n  }\n\n  const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));\n  const assets = stats.assets || [];\n  \n  console.log(`üìä Application Bundle Size Analysis (${projectName})`);\n  console.log('='.repeat(50));\n  \n  let hasWarnings = false;\n  let hasErrors = false;\n  \n  assets.forEach(asset => {\n    const sizeKB = Math.round(asset.size / 1024);\n    const name = asset.name;\n    \n    let status = '‚úÖ';\n    let message = '';\n    \n    // Check initial bundle\n    if (name.includes('main') && sizeKB > THRESHOLDS.app.initial) {\n      status = sizeKB > THRESHOLDS.app.initial * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n      message = `Exceeds threshold (${THRESHOLDS.app.initial}KB)`;\n      if (status === '‚ùå') hasErrors = true;\n      else hasWarnings = true;\n    }\n    \n    // Check vendor bundle\n    if (name.includes('vendor') && sizeKB > THRESHOLDS.app.vendor) {\n      status = sizeKB > THRESHOLDS.app.vendor * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n      message = `Exceeds threshold (${THRESHOLDS.app.vendor}KB)`;\n      if (status === '‚ùå') hasErrors = true;\n      else hasWarnings = true;\n    }\n    \n    console.log(`${status} ${name}: ${sizeKB}KB ${message}`);\n  });\n  \n  console.log('\\nüìà Performance Recommendations:');\n  console.log('- Use lazy loading for feature modules');\n  console.log('- Implement tree-shaking for unused code');\n  console.log('- Consider code splitting for large dependencies');\n  console.log('- Use Angular\\'s built-in optimization features');\n  \n  return { hasErrors, hasWarnings };\n}\n\nfunction checkLibraryBundleSize(libraryName = 'shared-lib') {\n  const distPath = path.join(__dirname, `../dist/${libraryName}`);\n  \n  if (!fs.existsSync(distPath)) {\n    console.error(`‚ùå Library dist folder not found: ${distPath}`);\n    console.error('Run \"ng build shared-lib\" first.');\n    process.exit(1);\n  }\n\n  console.log(`üìä Library Bundle Size Analysis (${libraryName})`);\n  console.log('='.repeat(50));\n  \n  let hasWarnings = false;\n  let hasErrors = false;\n  let totalSize = 0;\n  \n  // Check FESM bundles\n  const fesmPath = path.join(distPath, 'fesm2022');\n  if (fs.existsSync(fesmPath)) {\n    console.log('\\nüì¶ FESM2022 Bundles:');\n    const fesmFiles = fs.readdirSync(fesmPath);\n    \n    fesmFiles.forEach(file => {\n      const filePath = path.join(fesmPath, file);\n      const stats = fs.statSync(filePath);\n      const sizeKB = Math.round(stats.size / 1024);\n      totalSize += stats.size;\n      \n      let status = '‚úÖ';\n      let message = '';\n      \n      if (file.endsWith('.mjs') && sizeKB > THRESHOLDS.library.esm) {\n        status = sizeKB > THRESHOLDS.library.esm * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n        message = `Exceeds ESM threshold (${THRESHOLDS.library.esm}KB)`;\n        if (status === '‚ùå') hasErrors = true;\n        else hasWarnings = true;\n      }\n      \n      console.log(`  ${status} ${file}: ${sizeKB}KB ${message}`);\n    });\n  }\n  \n  // Check UMD bundles\n  const umdPath = path.join(distPath, 'bundles');\n  if (fs.existsSync(umdPath)) {\n    console.log('\\nüì¶ UMD Bundles:');\n    const umdFiles = fs.readdirSync(umdPath);\n    \n    umdFiles.forEach(file => {\n      const filePath = path.join(umdPath, file);\n      const stats = fs.statSync(filePath);\n      const sizeKB = Math.round(stats.size / 1024);\n      totalSize += stats.size;\n      \n      let status = '‚úÖ';\n      let message = '';\n      \n      if (file.endsWith('.umd.js') && sizeKB > THRESHOLDS.library.umd) {\n        status = sizeKB > THRESHOLDS.library.umd * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n        message = `Exceeds UMD threshold (${THRESHOLDS.library.umd}KB)`;\n        if (status === '‚ùå') hasErrors = true;\n        else hasWarnings = true;\n      }\n      \n      console.log(`  ${status} ${file}: ${sizeKB}KB ${message}`);\n    });\n  }\n  \n  // Check CSS files\n  const cssFiles = findFilesRecursively(distPath, '.css');\n  if (cssFiles.length > 0) {\n    console.log('\\nüé® CSS Files:');\n    cssFiles.forEach(file => {\n      const stats = fs.statSync(file);\n      const sizeKB = Math.round(stats.size / 1024);\n      const relativePath = path.relative(distPath, file);\n      totalSize += stats.size;\n      \n      let status = '‚úÖ';\n      let message = '';\n      \n      if (sizeKB > THRESHOLDS.library.css) {\n        status = sizeKB > THRESHOLDS.library.css * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n        message = `Exceeds CSS threshold (${THRESHOLDS.library.css}KB)`;\n        if (status === '‚ùå') hasErrors = true;\n        else hasWarnings = true;\n      }\n      \n      console.log(`  ${status} ${relativePath}: ${sizeKB}KB ${message}`);\n    });\n  }\n  \n  // Total size check\n  const totalSizeKB = Math.round(totalSize / 1024);\n  console.log(`\\nüìä Total Library Size: ${totalSizeKB}KB`);\n  \n  if (totalSizeKB > THRESHOLDS.library.total) {\n    const status = totalSizeKB > THRESHOLDS.library.total * 1.5 ? '‚ùå' : '‚ö†Ô∏è';\n    console.log(`${status} Total size exceeds threshold (${THRESHOLDS.library.total}KB)`);\n    if (status === '‚ùå') hasErrors = true;\n    else hasWarnings = true;\n  } else {\n    console.log('‚úÖ Total size is within acceptable limits');\n  }\n  \n  console.log('\\nüìà Library Optimization Recommendations:');\n  console.log('- Use tree-shakable exports');\n  console.log('- Minimize CSS bundle size with purging');\n  console.log('- Consider splitting large components');\n  console.log('- Use Angular\\'s secondary entry points for feature modules');\n  console.log('- Optimize Tailwind CSS configuration for library builds');\n  \n  return { hasErrors, hasWarnings, totalSizeKB };\n}\n\nfunction findFilesRecursively(dir, extension) {\n  const files = [];\n  \n  function searchDirectory(currentDir) {\n    const items = fs.readdirSync(currentDir);\n    \n    items.forEach(item => {\n      const fullPath = path.join(currentDir, item);\n      const stats = fs.statSync(fullPath);\n      \n      if (stats.isDirectory()) {\n        searchDirectory(fullPath);\n      } else if (item.endsWith(extension)) {\n        files.push(fullPath);\n      }\n    });\n  }\n  \n  if (fs.existsSync(dir)) {\n    searchDirectory(dir);\n  }\n  \n  return files;\n}\n\nfunction generateSizeReport(results, type, projectName) {\n  const report = {\n    timestamp: new Date().toISOString(),\n    type,\n    projectName,\n    results,\n    thresholds: THRESHOLDS[type === 'library' ? 'library' : 'app']\n  };\n  \n  const reportsDir = path.join(__dirname, '../reports');\n  if (!fs.existsSync(reportsDir)) {\n    fs.mkdirSync(reportsDir, { recursive: true });\n  }\n  \n  const reportPath = path.join(reportsDir, `bundle-size-${type}-${projectName}-${Date.now()}.json`);\n  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n  \n  console.log(`\\nüìÑ Size report saved to: ${reportPath}`);\n  return report;\n}\n\nfunction main() {\n  const args = process.argv.slice(2);\n  const isLibrary = args.includes('--library');\n  const projectName = args.find(arg => arg.startsWith('--project='))?.split('=')[1];\n  \n  console.log('Debug: args =', args);\n  console.log('Debug: isLibrary =', isLibrary);\n  console.log('Debug: projectName =', projectName);\n  \n  let results;\n  \n  if (isLibrary) {\n    const libraryName = projectName || 'shared-lib';\n    results = checkLibraryBundleSize(libraryName);\n    generateSizeReport(results, 'library', libraryName);\n  } else {\n    const appName = projectName || 'angular-v2-workspace';\n    results = checkApplicationBundleSize(appName);\n    generateSizeReport(results, 'app', appName);\n  }\n  \n  if (results.hasErrors) {\n    console.log('\\n‚ùå Bundle size check failed!');\n    process.exit(1);\n  } else if (results.hasWarnings) {\n    console.log('\\n‚ö†Ô∏è Bundle size warnings detected.');\n    process.exit(0);\n  } else {\n    console.log('\\n‚úÖ All bundle sizes are within acceptable limits.');\n    process.exit(0);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = {\n  checkApplicationBundleSize,\n  checkLibraryBundleSize,\n  generateSizeReport,\n  THRESHOLDS\n};"