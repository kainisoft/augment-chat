#!/usr/bin/env node\n\n/**\n * Comprehensive Build Validation Script\n * \n * Tests all build configurations and validates the library\n * works correctly in different scenarios.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconst BUILD_CONFIGURATIONS = [\n  {\n    name: 'development',\n    description: 'Development build with source maps',\n    command: 'ng build shared-lib --configuration development'\n  },\n  {\n    name: 'production',\n    description: 'Production build optimized for size',\n    command: 'ng build shared-lib --configuration production'\n  },\n  {\n    name: 'tailwind',\n    description: 'Build with Tailwind CSS processing',\n    command: 'TAILWIND_CONFIG=projects/shared-lib/tailwind.lib.config.js ng build shared-lib --configuration development',\n    env: { TAILWIND_CONFIG: 'projects/shared-lib/tailwind.lib.config.js' }\n  },\n  {\n    name: 'tailwind-purge',\n    description: 'Production build with Tailwind CSS purging',\n    command: 'TAILWIND_CONFIG=projects/shared-lib/tailwind.purge.config.js TAILWIND_MODE=purge ng build shared-lib --configuration production',\n    env: { \n      TAILWIND_CONFIG: 'projects/shared-lib/tailwind.purge.config.js',\n      TAILWIND_MODE: 'purge'\n    }\n  }\n];\n\nconst VALIDATION_TESTS = [\n  {\n    name: 'Library Build Validation',\n    script: 'node scripts/validate-library-build.js',\n    description: 'Validates library build output and structure'\n  },\n  {\n    name: 'Style Fallback Tests',\n    script: 'node scripts/test-style-fallbacks.js',\n    description: 'Tests style fallback system functionality'\n  },\n  {\n    name: 'Bundle Size Check',\n    script: 'node scripts/enhanced-bundle-size-check.js --library',\n    description: 'Validates bundle sizes are within limits'\n  }\n];\n\nclass BuildValidator {\n  constructor() {\n    this.results = {\n      builds: {},\n      validations: {},\n      summary: {\n        totalBuilds: 0,\n        successfulBuilds: 0,\n        totalValidations: 0,\n        successfulValidations: 0,\n        startTime: Date.now(),\n        endTime: null\n      }\n    };\n  }\n\n  async validateAllBuilds() {\n    console.log('üöÄ Starting comprehensive build validation...');\n    console.log('='.repeat(60));\n    \n    // Clean dist directory\n    this.cleanDistDirectory();\n    \n    // Test each build configuration\n    for (const config of BUILD_CONFIGURATIONS) {\n      await this.testBuildConfiguration(config);\n    }\n    \n    // Run validation tests on the final build\n    console.log('\\nüîç Running validation tests...');\n    for (const test of VALIDATION_TESTS) {\n      await this.runValidationTest(test);\n    }\n    \n    // Generate final report\n    this.generateFinalReport();\n    \n    return this.results;\n  }\n\n  cleanDistDirectory() {\n    const distPath = path.join(__dirname, '../dist/shared-lib');\n    if (fs.existsSync(distPath)) {\n      console.log('üßπ Cleaning dist directory...');\n      fs.rmSync(distPath, { recursive: true, force: true });\n    }\n  }\n\n  async testBuildConfiguration(config) {\n    console.log(`\\nüî® Testing ${config.name} build...`);\n    console.log(`   ${config.description}`);\n    \n    this.results.summary.totalBuilds++;\n    \n    const buildResult = {\n      name: config.name,\n      description: config.description,\n      command: config.command,\n      success: false,\n      duration: 0,\n      error: null,\n      bundleSize: null\n    };\n    \n    try {\n      const startTime = Date.now();\n      \n      // Set environment variables if specified\n      if (config.env) {\n        Object.entries(config.env).forEach(([key, value]) => {\n          process.env[key] = value;\n        });\n      }\n      \n      // Execute build\n      execSync(config.command, {\n        stdio: 'pipe',\n        cwd: path.join(__dirname, '..')\n      });\n      \n      buildResult.duration = Date.now() - startTime;\n      buildResult.success = true;\n      this.results.summary.successfulBuilds++;\n      \n      // Get bundle size\n      buildResult.bundleSize = this.getBundleSize();\n      \n      console.log(`   ‚úÖ Build completed in ${buildResult.duration}ms`);\n      if (buildResult.bundleSize) {\n        console.log(`   üì¶ Bundle size: ${buildResult.bundleSize.totalKB}KB`);\n      }\n      \n    } catch (error) {\n      buildResult.error = error.message;\n      console.log(`   ‚ùå Build failed: ${error.message}`);\n      \n      // Log build output for debugging\n      if (error.stdout) {\n        console.log('   Build output:', error.stdout.toString().slice(0, 500));\n      }\n    } finally {\n      // Clean up environment variables\n      if (config.env) {\n        Object.keys(config.env).forEach(key => {\n          delete process.env[key];\n        });\n      }\n    }\n    \n    this.results.builds[config.name] = buildResult;\n  }\n\n  async runValidationTest(test) {\n    console.log(`\\nüß™ Running ${test.name}...`);\n    console.log(`   ${test.description}`);\n    \n    this.results.summary.totalValidations++;\n    \n    const testResult = {\n      name: test.name,\n      description: test.description,\n      script: test.script,\n      success: false,\n      duration: 0,\n      error: null,\n      output: null\n    };\n    \n    try {\n      const startTime = Date.now();\n      \n      const output = execSync(test.script, {\n        stdio: 'pipe',\n        cwd: path.join(__dirname, '..')\n      });\n      \n      testResult.duration = Date.now() - startTime;\n      testResult.success = true;\n      testResult.output = output.toString();\n      this.results.summary.successfulValidations++;\n      \n      console.log(`   ‚úÖ Test completed in ${testResult.duration}ms`);\n      \n    } catch (error) {\n      testResult.error = error.message;\n      console.log(`   ‚ùå Test failed: ${error.message}`);\n      \n      // Log test output for debugging\n      if (error.stdout) {\n        console.log('   Test output:', error.stdout.toString().slice(0, 500));\n      }\n    }\n    \n    this.results.validations[test.name] = testResult;\n  }\n\n  getBundleSize() {\n    const distPath = path.join(__dirname, '../dist/shared-lib');\n    \n    if (!fs.existsSync(distPath)) {\n      return null;\n    }\n    \n    let totalSize = 0;\n    const files = [];\n    \n    function calculateSize(currentPath) {\n      const items = fs.readdirSync(currentPath);\n      \n      items.forEach(item => {\n        const fullPath = path.join(currentPath, item);\n        const stats = fs.statSync(fullPath);\n        \n        if (stats.isDirectory()) {\n          calculateSize(fullPath);\n        } else {\n          totalSize += stats.size;\n          files.push({\n            path: path.relative(distPath, fullPath),\n            size: stats.size,\n            sizeKB: Math.round(stats.size / 1024)\n          });\n        }\n      });\n    }\n    \n    calculateSize(distPath);\n    \n    return {\n      totalBytes: totalSize,\n      totalKB: Math.round(totalSize / 1024),\n      files\n    };\n  }\n\n  generateFinalReport() {\n    this.results.summary.endTime = Date.now();\n    const totalDuration = this.results.summary.endTime - this.results.summary.startTime;\n    \n    console.log('\\n' + '='.repeat(60));\n    console.log('üìä VALIDATION SUMMARY');\n    console.log('='.repeat(60));\n    \n    // Build results\n    console.log('\\nüî® Build Results:');\n    Object.values(this.results.builds).forEach(build => {\n      const status = build.success ? '‚úÖ' : '‚ùå';\n      const duration = build.success ? `${build.duration}ms` : 'Failed';\n      const size = build.bundleSize ? `${build.bundleSize.totalKB}KB` : 'N/A';\n      console.log(`  ${status} ${build.name}: ${duration} (${size})`);\n    });\n    \n    // Validation results\n    console.log('\\nüß™ Validation Results:');\n    Object.values(this.results.validations).forEach(validation => {\n      const status = validation.success ? '‚úÖ' : '‚ùå';\n      const duration = validation.success ? `${validation.duration}ms` : 'Failed';\n      console.log(`  ${status} ${validation.name}: ${duration}`);\n    });\n    \n    // Summary statistics\n    console.log('\\nüìà Summary:');\n    console.log(`  Total Duration: ${Math.round(totalDuration / 1000)}s`);\n    console.log(`  Successful Builds: ${this.results.summary.successfulBuilds}/${this.results.summary.totalBuilds}`);\n    console.log(`  Successful Validations: ${this.results.summary.successfulValidations}/${this.results.summary.totalValidations}`);\n    \n    const allSuccess = this.results.summary.successfulBuilds === this.results.summary.totalBuilds &&\n                      this.results.summary.successfulValidations === this.results.summary.totalValidations;\n    \n    console.log(`\\n${allSuccess ? 'üéâ' : 'üí•'} Overall Status: ${allSuccess ? 'SUCCESS' : 'FAILED'}`);\n    \n    // Save detailed report\n    this.saveDetailedReport();\n    \n    return allSuccess;\n  }\n\n  saveDetailedReport() {\n    const reportsDir = path.join(__dirname, '../reports');\n    if (!fs.existsSync(reportsDir)) {\n      fs.mkdirSync(reportsDir, { recursive: true });\n    }\n    \n    const reportPath = path.join(reportsDir, `validation-report-${Date.now()}.json`);\n    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));\n    \n    console.log(`\\nüìÑ Detailed report saved to: ${reportPath}`);\n  }\n}\n\nasync function main() {\n  const validator = new BuildValidator();\n  \n  try {\n    const success = await validator.validateAllBuilds();\n    process.exit(success ? 0 : 1);\n  } catch (error) {\n    console.error('‚ùå Validation process failed:', error.message);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = BuildValidator;"