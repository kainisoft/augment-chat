#!/usr/bin/env node\n\n/**\n * Development Script for Library Styles\n * \n * Provides a development environment for testing library styles\n * with hot reloading and automatic validation.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { spawn, execSync } = require('child_process');\nconst chokidar = require('chokidar');\n\nconst LIBRARY_ROOT = path.join(__dirname, '../projects/shared-lib');\nconst WATCH_PATTERNS = [\n  'projects/shared-lib/src/**/*.scss',\n  'projects/shared-lib/src/**/*.css',\n  'projects/shared-lib/src/**/*.ts',\n  'projects/shared-lib/src/**/*.html',\n  'projects/shared-lib/tailwind.*.config.js',\n  'projects/shared-lib/postcss.config.js'\n];\n\nclass LibraryStylesDevelopment {\n  constructor() {\n    this.buildProcess = null;\n    this.isBuilding = false;\n    this.buildQueue = [];\n    this.lastBuildTime = 0;\n    this.debounceDelay = 1000; // 1 second\n  }\n\n  start() {\n    console.log('üöÄ Starting library styles development environment...');\n    \n    // Initial build\n    this.triggerBuild('Initial build');\n    \n    // Set up file watchers\n    this.setupWatchers();\n    \n    // Set up process handlers\n    this.setupProcessHandlers();\n    \n    console.log('üëÄ Watching for changes...');\n    console.log('Press Ctrl+C to stop');\n  }\n\n  setupWatchers() {\n    const watcher = chokidar.watch(WATCH_PATTERNS, {\n      ignored: /(^|[\\/\\\\])\\../, // ignore dotfiles\n      persistent: true,\n      ignoreInitial: true\n    });\n\n    watcher.on('change', (filePath) => {\n      const relativePath = path.relative(process.cwd(), filePath);\n      console.log(`üìù Changed: ${relativePath}`);\n      this.triggerBuild(`File changed: ${relativePath}`);\n    });\n\n    watcher.on('add', (filePath) => {\n      const relativePath = path.relative(process.cwd(), filePath);\n      console.log(`‚ûï Added: ${relativePath}`);\n      this.triggerBuild(`File added: ${relativePath}`);\n    });\n\n    watcher.on('unlink', (filePath) => {\n      const relativePath = path.relative(process.cwd(), filePath);\n      console.log(`‚ûñ Removed: ${relativePath}`);\n      this.triggerBuild(`File removed: ${relativePath}`);\n    });\n\n    watcher.on('error', (error) => {\n      console.error('‚ùå Watcher error:', error);\n    });\n  }\n\n  triggerBuild(reason) {\n    const now = Date.now();\n    \n    // Debounce builds\n    if (now - this.lastBuildTime < this.debounceDelay) {\n      if (this.buildTimeout) {\n        clearTimeout(this.buildTimeout);\n      }\n      \n      this.buildTimeout = setTimeout(() => {\n        this.executeBuild(reason);\n      }, this.debounceDelay);\n      \n      return;\n    }\n    \n    this.executeBuild(reason);\n  }\n\n  async executeBuild(reason) {\n    if (this.isBuilding) {\n      this.buildQueue.push(reason);\n      return;\n    }\n\n    this.isBuilding = true;\n    this.lastBuildTime = Date.now();\n    \n    console.log(`\\nüî® Building library (${reason})...`);\n    \n    try {\n      const startTime = Date.now();\n      \n      // Build the library\n      execSync('ng build shared-lib --configuration development', {\n        stdio: 'pipe',\n        cwd: path.join(__dirname, '..')\n      });\n      \n      const buildTime = Date.now() - startTime;\n      console.log(`‚úÖ Build completed in ${buildTime}ms`);\n      \n      // Run validation\n      await this.runValidation();\n      \n    } catch (error) {\n      console.error('‚ùå Build failed:', error.message);\n      \n      // Try to extract useful error information\n      if (error.stdout) {\n        console.log('Build output:', error.stdout.toString());\n      }\n      if (error.stderr) {\n        console.error('Build errors:', error.stderr.toString());\n      }\n    } finally {\n      this.isBuilding = false;\n      \n      // Process queued builds\n      if (this.buildQueue.length > 0) {\n        const nextReason = this.buildQueue.shift();\n        setTimeout(() => this.executeBuild(nextReason), 100);\n      }\n    }\n  }\n\n  async runValidation() {\n    try {\n      console.log('üîç Running validation...');\n      \n      // Run style fallback tests\n      execSync('node scripts/test-style-fallbacks.js', {\n        stdio: 'pipe',\n        cwd: path.join(__dirname, '..')\n      });\n      \n      console.log('‚úÖ Validation passed');\n      \n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Validation warnings:', error.message);\n    }\n  }\n\n  setupProcessHandlers() {\n    process.on('SIGINT', () => {\n      console.log('\\nüõë Stopping development environment...');\n      \n      if (this.buildProcess) {\n        this.buildProcess.kill();\n      }\n      \n      process.exit(0);\n    });\n\n    process.on('SIGTERM', () => {\n      console.log('\\nüõë Terminating development environment...');\n      process.exit(0);\n    });\n  }\n\n  // Manual build trigger for testing\n  manualBuild() {\n    this.triggerBuild('Manual trigger');\n  }\n\n  // Get current status\n  getStatus() {\n    return {\n      isBuilding: this.isBuilding,\n      queueLength: this.buildQueue.length,\n      lastBuildTime: this.lastBuildTime\n    };\n  }\n}\n\n// CLI interface\nfunction main() {\n  const args = process.argv.slice(2);\n  const command = args[0] || 'start';\n  \n  switch (command) {\n    case 'start':\n    case 'dev':\n      const devEnv = new LibraryStylesDevelopment();\n      devEnv.start();\n      break;\n      \n    case 'build':\n      console.log('üî® Running single build...');\n      try {\n        execSync('ng build shared-lib --configuration development', { stdio: 'inherit' });\n        execSync('node scripts/test-style-fallbacks.js', { stdio: 'inherit' });\n        console.log('‚úÖ Build and validation completed');\n      } catch (error) {\n        console.error('‚ùå Build failed:', error.message);\n        process.exit(1);\n      }\n      break;\n      \n    case 'validate':\n      console.log('üîç Running validation only...');\n      try {\n        execSync('node scripts/test-style-fallbacks.js', { stdio: 'inherit' });\n        console.log('‚úÖ Validation completed');\n      } catch (error) {\n        console.error('‚ùå Validation failed:', error.message);\n        process.exit(1);\n      }\n      break;\n      \n    case 'help':\n    default:\n      console.log('Library Styles Development Tool');\n      console.log('');\n      console.log('Usage: node scripts/dev-lib-styles.js [command]');\n      console.log('');\n      console.log('Commands:');\n      console.log('  start, dev    Start development environment with file watching');\n      console.log('  build         Run a single build');\n      console.log('  validate      Run validation tests only');\n      console.log('  help          Show this help message');\n      break;\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = LibraryStylesDevelopment;"