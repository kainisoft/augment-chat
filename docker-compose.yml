version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/api-gateway.Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - auth-service
      - user-service
      - chat-service
      - notification-service
    networks:
      - chat-network

  # Auth Service
  auth-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/auth-service.Dockerfile
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - PORT=4001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/auth_db
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - kafka
    networks:
      - chat-network

  # User Service
  user-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/user-service.Dockerfile
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=development
      - PORT=4002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/user_db
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - kafka
    networks:
      - chat-network

  # Chat Service
  chat-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/chat-service.Dockerfile
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=development
      - PORT=4003
      - MONGODB_URI=mongodb://mongo:mongo@mongo:27017/chat_db?authSource=admin
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - mongo
      - kafka
    networks:
      - chat-network

  # Notification Service
  notification-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/notification-service.Dockerfile
    ports:
      - "4004:4004"
    environment:
      - NODE_ENV=development
      - PORT=4004
      - MONGODB_URI=mongodb://mongo:mongo@mongo:27017/notification_db?authSource=admin
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - mongo
      - kafka
    networks:
      - chat-network

  # PostgreSQL
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - chat-network

  # MongoDB
  mongo:
    image: mongo:5
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    volumes:
      - mongo-data:/data/db
      - ./docker/init-scripts/mongo:/docker-entrypoint-initdb.d
    networks:
      - chat-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - chat-network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - chat-network

  # Redis Cluster (Simulating production setup)
  redis-node-1:
    image: redis:6-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
      - "16379:16379"
    volumes:
      - ./docker/config/redis/redis-node-1.conf:/usr/local/etc/redis/redis.conf
      - redis-node-1-data:/data
    networks:
      - chat-network

  redis-node-2:
    image: redis:6-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6380:6379"
      - "16380:16379"
    volumes:
      - ./docker/config/redis/redis-node-2.conf:/usr/local/etc/redis/redis.conf
      - redis-node-2-data:/data
    networks:
      - chat-network

  redis-node-3:
    image: redis:6-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6381:6379"
      - "16381:16379"
    volumes:
      - ./docker/config/redis/redis-node-3.conf:/usr/local/etc/redis/redis.conf
      - redis-node-3-data:/data
    networks:
      - chat-network

  redis-cluster-init:
    image: redis:6-alpine
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    command: >
      sh -c "sleep 5 &&
             redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 --cluster-yes"
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  kafka-data:
  zookeeper-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
