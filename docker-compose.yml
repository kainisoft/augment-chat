version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/api-gateway.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 api-gateway
    ports:
      - "4000:4000"
    env_file:
      - ./docker/config/api-gateway/api-gateway.env
    volumes:
      - ./server/apps/api-gateway:/app/apps/api-gateway:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - api-gateway-node-modules:/app/node_modules
    networks:
      - chat-network
    profiles: [ "api" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # WebSocket Gateway
  websocket-gateway:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/websocket-gateway.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 websocket-gateway
    ports:
      - "4001:4001"
      - "9233:9229"
    env_file:
      - ./docker/config/websocket-gateway/websocket-gateway.env
    volumes:
      - ./server/apps/websocket-gateway:/app/apps/websocket-gateway:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - websocket-gateway-node-modules:/app/node_modules
    networks:
      - chat-network
    profiles: [ "websocket" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4001/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Auth Service
  auth-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/auth-service.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 auth-service
    ports:
      - "4001:4001"
      - "9229:9229"
    env_file:
      - ./docker/config/auth-service/auth-service.env
    volumes:
      - ./server/apps/auth-service:/app/apps/auth-service:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - auth-service-node-modules:/app/node_modules
    networks:
      - chat-network
    profiles: [ "auth" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4001/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # User Service
  user-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/user-service.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 user-service
    ports:
      - "4002:4002"
      - "9230:9229"
    env_file:
      - ./docker/config/user-service/user-service.env
    volumes:
      - ./server/apps/user-service:/app/apps/user-service:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - user-service-node-modules:/app/node_modules
    networks:
      - chat-network
    profiles: [ "user" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4002/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Chat Service
  chat-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/chat-service.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 chat-service
    ports:
      - "4003:4003"
      - "9232:9229"
    env_file:
      - ./docker/config/chat-service/chat-service.env
    volumes:
      - ./server/apps/chat-service:/app/apps/chat-service:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - chat-service-node-modules:/app/node_modules
    networks:
      - chat-network
    profiles: [ "chat" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4003/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Notification Service
  notification-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/notification-service.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    ports:
      - "4004:4004"
    env_file:
      - ./docker/config/notification-service/notification-service.env
    volumes:
      - ./server/apps/notification-service:/app/apps/notification-service:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - ./server/webpack-hmr.config.js:/app/webpack-hmr.config.js:delegated
      - notification-service-node-modules:/app/node_modules
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chat-network
    profiles: [ "notification" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4004/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Logging Service
  logging-service:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfiles/logging-service.Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    command: pnpm run start:debug 0.0.0.0:9229 logging-service
    ports:
      - "4005:4005"
      - "9231:9229"
    env_file:
      - ./docker/config/logging-service/logging-service.env
    volumes:
      - ./server/apps/logging-service:/app/apps/logging-service:delegated
      - ./server/libs:/app/libs:delegated
      - ./server/nest-cli.json:/app/nest-cli.json:delegated
      - ./server/tsconfig.json:/app/tsconfig.json:delegated
      - logging-service-node-modules:/app/node_modules
    depends_on:
      kafka:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - chat-network
    profiles: [ "logging", "infra" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://127.0.0.1:4005/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # PostgreSQL
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chat-network
    profiles: [ "db", "infra" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB
  mongo:
    image: mongo:5
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    volumes:
      - mongo-data:/data/db
      - ./docker/init-scripts/mongo:/docker-entrypoint-initdb.d
    networks:
      - chat-network
    profiles: [ "db", "infra" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - chat-network
    profiles: [ "logging", "infra" ]
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 || exit 0" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_DELETE_TOPIC_ENABLE=true
    volumes:
      - kafka-data:/bitnami/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - chat-network
    profiles: [ "logging", "infra" ]
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 0" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cluster (Simulating production setup)
  redis-node-1:
    image: redis:7.4-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
      - "16379:16379"
    volumes:
      - ./docker/config/redis/redis-node-1.conf:/usr/local/etc/redis/redis.conf
      - redis-node-1-data:/data
    networks:
      - chat-network
    profiles: [ "infra" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-node-2:
    image: redis:7.4-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6380:6379"
      - "16380:16379"
    volumes:
      - ./docker/config/redis/redis-node-2.conf:/usr/local/etc/redis/redis.conf
      - redis-node-2-data:/data
    networks:
      - chat-network
    profiles: [ "infra" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-node-3:
    image: redis:7.4-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6381:6379"
      - "16381:16379"
    volumes:
      - ./docker/config/redis/redis-node-3.conf:/usr/local/etc/redis/redis.conf
      - redis-node-3-data:/data
    networks:
      - chat-network
    profiles: [ "infra" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-cluster-init:
    image: redis:7.4-alpine
    depends_on:
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
    command: >
      sh -c "sleep 5 &&
             # Create the Redis cluster with replicas
             redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 --cluster-yes"
    networks:
      - chat-network
    profiles: [ "infra" ]
    restart: on-failure

  # Loki (Log Storage)
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./docker/config/loki/local-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - chat-network
    profiles: [ "logging", "infra" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - chat-network
    profiles: [ "logging", "infra" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  chat-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  kafka-data:
  zookeeper-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  api-gateway-node-modules:
  websocket-gateway-node-modules:
  auth-service-node-modules:
  user-service-node-modules:
  chat-service-node-modules:
  notification-service-node-modules:
  logging-service-node-modules:
  loki-data:
  grafana-data:
